// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: fcd9ff140d
// Version Date: 2021-07-14T06:36:40Z

// Package grpc provides a gRPC client for the Im service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/Presbyter/services/protobuf"
	"github.com/Presbyter/services/src/service/im-service/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.ImServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var createaccountEndpoint endpoint.Endpoint
	{
		createaccountEndpoint = grpctransport.NewClient(
			conn,
			"protobuf.Im",
			"CreateAccount",
			EncodeGRPCCreateAccountRequest,
			DecodeGRPCCreateAccountResponse,
			pb.CreateAccountResp{},
			clientOptions...,
		).Endpoint()
	}

	var addgroupEndpoint endpoint.Endpoint
	{
		addgroupEndpoint = grpctransport.NewClient(
			conn,
			"protobuf.Im",
			"AddGroup",
			EncodeGRPCAddGroupRequest,
			DecodeGRPCAddGroupResponse,
			pb.AddGroupResp{},
			clientOptions...,
		).Endpoint()
	}

	var deletegroupEndpoint endpoint.Endpoint
	{
		deletegroupEndpoint = grpctransport.NewClient(
			conn,
			"protobuf.Im",
			"DeleteGroup",
			EncodeGRPCDeleteGroupRequest,
			DecodeGRPCDeleteGroupResponse,
			pb.Empty{},
			clientOptions...,
		).Endpoint()
	}

	var addfriendEndpoint endpoint.Endpoint
	{
		addfriendEndpoint = grpctransport.NewClient(
			conn,
			"protobuf.Im",
			"AddFriend",
			EncodeGRPCAddFriendRequest,
			DecodeGRPCAddFriendResponse,
			pb.Empty{},
			clientOptions...,
		).Endpoint()
	}

	var deletefriendEndpoint endpoint.Endpoint
	{
		deletefriendEndpoint = grpctransport.NewClient(
			conn,
			"protobuf.Im",
			"DeleteFriend",
			EncodeGRPCDeleteFriendRequest,
			DecodeGRPCDeleteFriendResponse,
			pb.Empty{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		CreateAccountEndpoint: createaccountEndpoint,
		AddGroupEndpoint:      addgroupEndpoint,
		DeleteGroupEndpoint:   deletegroupEndpoint,
		AddFriendEndpoint:     addfriendEndpoint,
		DeleteFriendEndpoint:  deletefriendEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCCreateAccountResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC createaccount reply to a user-domain createaccount response. Primarily useful in a client.
func DecodeGRPCCreateAccountResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.CreateAccountResp)
	return reply, nil
}

// DecodeGRPCAddGroupResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC addgroup reply to a user-domain addgroup response. Primarily useful in a client.
func DecodeGRPCAddGroupResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.AddGroupResp)
	return reply, nil
}

// DecodeGRPCDeleteGroupResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC deletegroup reply to a user-domain deletegroup response. Primarily useful in a client.
func DecodeGRPCDeleteGroupResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Empty)
	return reply, nil
}

// DecodeGRPCAddFriendResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC addfriend reply to a user-domain addfriend response. Primarily useful in a client.
func DecodeGRPCAddFriendResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Empty)
	return reply, nil
}

// DecodeGRPCDeleteFriendResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC deletefriend reply to a user-domain deletefriend response. Primarily useful in a client.
func DecodeGRPCDeleteFriendResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.Empty)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCCreateAccountRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain createaccount request to a gRPC createaccount request. Primarily useful in a client.
func EncodeGRPCCreateAccountRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.CreateAccountReq)
	return req, nil
}

// EncodeGRPCAddGroupRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain addgroup request to a gRPC addgroup request. Primarily useful in a client.
func EncodeGRPCAddGroupRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.AddGroupReq)
	return req, nil
}

// EncodeGRPCDeleteGroupRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain deletegroup request to a gRPC deletegroup request. Primarily useful in a client.
func EncodeGRPCDeleteGroupRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DeleteGroupReq)
	return req, nil
}

// EncodeGRPCAddFriendRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain addfriend request to a gRPC addfriend request. Primarily useful in a client.
func EncodeGRPCAddFriendRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.AddFriendReq)
	return req, nil
}

// EncodeGRPCDeleteFriendRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain deletefriend request to a gRPC deletefriend request. Primarily useful in a client.
func EncodeGRPCDeleteFriendRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DeleteFriendReq)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
