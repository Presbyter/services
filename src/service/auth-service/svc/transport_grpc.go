// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: fcd9ff140d
// Version Date: 2021-07-14T06:36:40Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/Presbyter/services/protobuf"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC AuthServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.AuthServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// auth

		getcode: grpctransport.NewServer(
			endpoints.GetCodeEndpoint,
			DecodeGRPCGetCodeRequest,
			EncodeGRPCGetCodeResponse,
			serverOptions...,
		),
		gettoken: grpctransport.NewServer(
			endpoints.GetTokenEndpoint,
			DecodeGRPCGetTokenRequest,
			EncodeGRPCGetTokenResponse,
			serverOptions...,
		),
		refreshtoken: grpctransport.NewServer(
			endpoints.RefreshTokenEndpoint,
			DecodeGRPCRefreshTokenRequest,
			EncodeGRPCRefreshTokenResponse,
			serverOptions...,
		),
		bantoken: grpctransport.NewServer(
			endpoints.BanTokenEndpoint,
			DecodeGRPCBanTokenRequest,
			EncodeGRPCBanTokenResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the AuthServer interface
type grpcServer struct {
	getcode      grpctransport.Handler
	gettoken     grpctransport.Handler
	refreshtoken grpctransport.Handler
	bantoken     grpctransport.Handler
}

// Methods for grpcServer to implement AuthServer interface

func (s *grpcServer) GetCode(ctx context.Context, req *pb.GetCodeReq) (*pb.GetCodeResp, error) {
	_, rep, err := s.getcode.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetCodeResp), nil
}

func (s *grpcServer) GetToken(ctx context.Context, req *pb.GetTokenReq) (*pb.GetTokenResp, error) {
	_, rep, err := s.gettoken.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetTokenResp), nil
}

func (s *grpcServer) RefreshToken(ctx context.Context, req *pb.RefreshTokenReq) (*pb.RefreshTokenResp, error) {
	_, rep, err := s.refreshtoken.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.RefreshTokenResp), nil
}

func (s *grpcServer) BanToken(ctx context.Context, req *pb.BanTokenReq) (*pb.Empty, error) {
	_, rep, err := s.bantoken.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Empty), nil
}

// Server Decode

// DecodeGRPCGetCodeRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getcode request to a user-domain getcode request. Primarily useful in a server.
func DecodeGRPCGetCodeRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetCodeReq)
	return req, nil
}

// DecodeGRPCGetTokenRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC gettoken request to a user-domain gettoken request. Primarily useful in a server.
func DecodeGRPCGetTokenRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetTokenReq)
	return req, nil
}

// DecodeGRPCRefreshTokenRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC refreshtoken request to a user-domain refreshtoken request. Primarily useful in a server.
func DecodeGRPCRefreshTokenRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.RefreshTokenReq)
	return req, nil
}

// DecodeGRPCBanTokenRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC bantoken request to a user-domain bantoken request. Primarily useful in a server.
func DecodeGRPCBanTokenRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.BanTokenReq)
	return req, nil
}

// Server Encode

// EncodeGRPCGetCodeResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getcode response to a gRPC getcode reply. Primarily useful in a server.
func EncodeGRPCGetCodeResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetCodeResp)
	return resp, nil
}

// EncodeGRPCGetTokenResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain gettoken response to a gRPC gettoken reply. Primarily useful in a server.
func EncodeGRPCGetTokenResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetTokenResp)
	return resp, nil
}

// EncodeGRPCRefreshTokenResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain refreshtoken response to a gRPC refreshtoken reply. Primarily useful in a server.
func EncodeGRPCRefreshTokenResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.RefreshTokenResp)
	return resp, nil
}

// EncodeGRPCBanTokenResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain bantoken response to a gRPC bantoken reply. Primarily useful in a server.
func EncodeGRPCBanTokenResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Empty)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
